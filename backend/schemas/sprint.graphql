scalar Date
enum taskStatusType{
   Pending
   Active
   Completed
   Onhold
}

enum sprintApprovalType{
   Pending
   Approved
   Unapproved
}

type Comments{
    _id: ID,
    user: User,
    comment: String,
    createdAt: Date
}

type Tasks{
    _id: ID,
    name: String,
    user: User
    hours: Float,
    createdAt: Date,
    createdBy: User,
    completion: Float,
    status: taskStatusType
    comments: [Comments]
}

type AllocatedUsersType{
  _id: ID,
  firstName: String,
  lastName: String,
  email: String,
  avtaar: String
}

type SprintProject{
    _id: ID!,
    name: String!,
    code: String,
    smj: User!
    dsmj: User
    po: User!
    spo: User,
    poRanking: Float,
    gurujiRanking: Float,
    completion: Float,
    projectWiseAllocation: Float,
    approvalStatus: sprintApprovalType
    task:[Tasks],
    allocatedUsers:[AllocatedUsersType]
}

type Sprint{
  _id: ID!,
  name: String!
  code: String
  startDate: Date!
  endDate: Date!
  hours: Float
  createdBy: User!
  projects: [SprintProject]
  status: projectStatusType!
  completion: Float,
  createdAt: Date
}

type sprintUser{
  _id: ID!,
  firstName: String!
  lastName: String!
  email: String!
  avtaar: String!
  hoursLeft: Float
}

type Query {
  sprints(_id: ID): [Sprint]
  activeSprint: Sprint
  userHours(_id: ID): [sprintUser]
}

input SprintInput{
  name: String!
  code: String
  startDate: Date!
  endDate: Date!
  sprintHours: Float
  createdBy: ID!
}

type SprintError{
  name: String,
  message: String
}

type SprintGeneralPayload{
  message: String,
  error: [ProjectError]
}

type SprintPayload{ 
  error: [SprintError],
  sprint: Sprint
}

input tasksInput{
    name: String!
    user: ID!
    hours: Float,
    completion: Float
}
input AddUpdateTaskInput{
    sprintId: ID!
    projectId: ID!
    tasks: [tasksInput]
}

input updateTaskStatusInput{
    sprintId: ID!
    projectId: ID!
    taskId: ID!
    status: projectStatusType,
    completion: Float
}

input updateSprintInput{
  sprintId: ID!
  name: String!
  code: String
  startDate: Date!
  endDate: Date!
  sprintHours: Float!
}

input deleteSprintInput{
    _id: ID!
}

input updateProjectRankingInput{
  sprintId: ID!
  projectId: ID!
  poRanking: Float
  gurujiRanking: Float
}

input updateProjectApprovalStatusInput {
  sprintId: ID!
  projectId: ID!
  approvalStatus: sprintApprovalType
}

input addCommentInput{
  sprintId: ID!
  projectId: ID!
  taskId: ID!
  comment: String!
}
input updateCommentInput{
  sprintId: ID!
  projectId: ID!
  taskId: ID!
  commentId: ID!
  comment: String!
}

input removeCommentInput{
    sprintId: ID!
    projectId: ID!
    taskId: ID!
    commentId: ID!
}


type Mutation{
    createSprint(input:SprintInput): SprintGeneralPayload
    addUpdateTask(input:AddUpdateTaskInput): SprintPayload
    updateTaskStatus(input:updateTaskStatusInput): SprintPayload
    updateSprint(input:updateSprintInput): SprintGeneralPayload
    removeSprint(input:deleteSprintInput): SprintGeneralPayload
    updateProjectRanking(input:updateProjectRankingInput): SprintGeneralPayload
    updateProjectApprovalStatus(input:updateProjectApprovalStatusInput): SprintGeneralPayload
    addComment(input:addCommentInput): SprintGeneralPayload
    updateComment(input:updateCommentInput): SprintGeneralPayload
    removeComment(input:removeCommentInput): SprintGeneralPayload
}